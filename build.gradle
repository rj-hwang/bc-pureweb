import java.text.SimpleDateFormat

//apply plugin: 'maven'
apply plugin: 'maven-publish' // for nexus
//apply plugin: 'eclipse'
//apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'war'
//apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'
apply from: 'gretty.plugin'

//sourceCompatibility = 1.7
//targetCompatibility = 1.7  

group = "cn.sb.web.appserver" 
version = '1.0-SNAPSHOT'

//defaultTasks 'clean', 'jar' 

jar {
    manifest {
        attributes 'Implementation-Title': 'PureWeb Server',
                'Implementation-Version': version,
                'Author': 'dragon',
                'BuildTime': "${buildTime()}"
    }
}
war {
    manifest {
        attributes 'Implementation-Title': 'PureWeb Server',
                'Implementation-Version': version,
                'Author': 'dragon',
                'BuildTime': "${buildTime()}"
    }
}
gretty {
  httpPort = 8081
  contextPath = '/sb'
  // managedClassReload = true
  servletContainer = 'tomcat8' // jetty7, jetty8, jetty9, tomcat7, tomcat8
}

repositories {
    // Use 'jcenter' for resolving your dependencies.
    //jcenter()

    // use the local Maven cache as a repository
    //mavenLocal()

    // add the central Maven 2 repository (http://repo1.maven.org/maven2)
    //mavenCentral()

    // nexus
    maven {url "http://192.168.0.222:8081/nexus/content/groups/public/"} 
}

configurations {
    // 排除的 jar
    compile.exclude module: 'commons-logging'
    compile.exclude module: 'log4j'
}
dependencies {
    // log
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    runtime "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    runtime "ch.qos.logback:logback-core:$logbackVersion"
    runtime "ch.qos.logback:logback-classic:$logbackVersion"
    runtime "ch.qos.logback:logback-site:$logbackVersion"

    // spring
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-beans:$springVersion"
    compile "org.springframework:spring-aop:$springVersion"
    compile "org.springframework:spring-expression:$springVersion"
    compile "org.springframework:spring-context-support:$springVersion"
    compile "org.springframework:spring-aspects:$springVersion"
    compile "org.springframework:spring-jdbc:$springVersion"
    compile "org.springframework:spring-tx:$springVersion"
    compile "org.springframework:spring-messaging:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-websocket:$springVersion"
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "org.springframework:spring-mock:$springMockVersion"

    // web
    providedCompile "javax.servlet:javax.servlet-api:$servletVersion"

    // test
    testCompile "junit:junit:$junitVersion"
}

// 列出编译时依赖的 jar
task listCompileJars << {
    configurations.compile.each { File file -> println file.name }
}
// 列出运行时依赖的 jar
task listRuntimeJars << {
    configurations.runtime.each { File file -> println file.name }
}
// 列出测试编译时依赖的 jar
task listTestCompileJars << {
    configurations.testCompile.each { File file -> println file.name }
}
// 列出测试运行时依赖的 jar
task listTestRuntimeJars << {
    configurations.testRuntime.each { File file -> println file.name }
}

// 打包源代码
task sourceJar(type: Jar) { 
    from sourceSets.main.allJava 
}

// 发布到 nexus
publishing { 
    publications { 
        mavenJava(MavenPublication) { 
            from components.java 

            artifact sourceJar { 
                classifier "sources" 
            } 
        } 
    } 
    repositories { 
        maven { 
            url "http://192.168.0.222:8081/nexus/content/repositories/snapshots"  
            credentials { 
              username 'admin' 
              password 'admin123' 
            } 
        } 
    } 
}

// try
task me() {
   println "$author"
}

// 获取当前时间
def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    //df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}